// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/entities/information_entity.dart';
import 'src/entities/text_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2303345108047584838),
      name: 'InformationEntity',
      lastPropertyId: const IdUid(2, 28154270049486243),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3898158509347352390),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 28154270049486243),
            name: 'color',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 346088136466920095),
            name: 'texts',
            targetId: const IdUid(2, 1657017677600715803))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1657017677600715803),
      name: 'TextEntity',
      lastPropertyId: const IdUid(6, 2539724111022286892),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7592321791786306611),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7269582073806100974),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3072904817019148491),
            name: 'fontSize',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8176394286956245395),
            name: 'isBold',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3198139017040699527),
            name: 'isItalic',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2539724111022286892),
            name: 'isUnderline',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 1657017677600715803),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(1, 346088136466920095),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    InformationEntity: EntityDefinition<InformationEntity>(
        model: _entities[0],
        toOneRelations: (InformationEntity object) => [],
        toManyRelations: (InformationEntity object) =>
            {RelInfo<InformationEntity>.toMany(1, object.id): object.texts},
        getId: (InformationEntity object) => object.id,
        setId: (InformationEntity object, int id) {
          object.id = id;
        },
        objectToFB: (InformationEntity object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.color);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final colorParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = InformationEntity(id: idParam, color: colorParam);
          InternalToManyAccess.setRelInfo<InformationEntity>(object.texts,
              store, RelInfo<InformationEntity>.toMany(1, object.id));
          return object;
        }),
    TextEntity: EntityDefinition<TextEntity>(
        model: _entities[1],
        toOneRelations: (TextEntity object) => [],
        toManyRelations: (TextEntity object) => {},
        getId: (TextEntity object) => object.id,
        setId: (TextEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TextEntity object, fb.Builder fbb) {
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, contentOffset);
          fbb.addInt64(2, object.fontSize);
          fbb.addBool(3, object.isBold);
          fbb.addBool(4, object.isItalic);
          fbb.addBool(5, object.isUnderline);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final fontSizeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final isBoldParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final isItalicParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final isUnderlineParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final object = TextEntity(
              id: idParam,
              content: contentParam,
              fontSize: fontSizeParam,
              isBold: isBoldParam,
              isItalic: isItalicParam,
              isUnderline: isUnderlineParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [InformationEntity] entity fields to define ObjectBox queries.
class InformationEntity_ {
  /// see [InformationEntity.id]
  static final id =
      QueryIntegerProperty<InformationEntity>(_entities[0].properties[0]);

  /// see [InformationEntity.color]
  static final color =
      QueryIntegerProperty<InformationEntity>(_entities[0].properties[1]);

  /// see [InformationEntity.texts]
  static final texts = QueryRelationToMany<InformationEntity, TextEntity>(
      _entities[0].relations[0]);
}

/// [TextEntity] entity fields to define ObjectBox queries.
class TextEntity_ {
  /// see [TextEntity.id]
  static final id =
      QueryIntegerProperty<TextEntity>(_entities[1].properties[0]);

  /// see [TextEntity.content]
  static final content =
      QueryStringProperty<TextEntity>(_entities[1].properties[1]);

  /// see [TextEntity.fontSize]
  static final fontSize =
      QueryIntegerProperty<TextEntity>(_entities[1].properties[2]);

  /// see [TextEntity.isBold]
  static final isBold =
      QueryBooleanProperty<TextEntity>(_entities[1].properties[3]);

  /// see [TextEntity.isItalic]
  static final isItalic =
      QueryBooleanProperty<TextEntity>(_entities[1].properties[4]);

  /// see [TextEntity.isUnderline]
  static final isUnderline =
      QueryBooleanProperty<TextEntity>(_entities[1].properties[5]);
}
